name: Mutation Testing PR Summary

# - generates a PR comment summary of mutation testing results from GitHub Code Scanning
# - lists surviving mutants (test coverage gaps) found in the changed files
# - shows how many mutants were dismissed with proper justification
# - reports net unresolved findings that need attention
# - provides a clear overview of test coverage quality for the PR
# - leaves a summary comment starting with "ðŸ§ª Mutation Testing Summary"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths:
      - 'src/**/*.sol'
  workflow_run:
    workflows: ["Olympix Mutation Testing"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to generate summary for'
        required: true
        type: string
      skip_check_run_wait:
        description: 'Show empty results for mutation-results check run'
        required: false
        default: true
        type: boolean
      use_latest_run:
        description: 'Immediately use latest check run without waiting'
        required: false
        default: false
        type: boolean

permissions:
  contents: read # required to fetch repository contents
  pull-requests: write # required to post, update PR comments & revert PR to draft
  security-events: read # required to fetch code scanning alerts
  issues: write # required to post comments via the GitHub Issues API (used for PR comments)

jobs:
  mutation-testing-summary:
    runs-on: ubuntu-latest
    # Only run if this is a pull request context or manual dispatch
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.event == 'pull_request')

    steps:

      - uses: actions/checkout@v4

      - name: Wait for mutation-results check run to complete
        if: (github.event_name != 'workflow_dispatch' || github.event.inputs.skip_check_run_wait != 'true') && github.event.inputs.use_latest_run != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Waiting for mutation-results check run to complete..."
          
          # Determine commit SHA if available
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
            echo "Target commit from workflow_run: $COMMIT_SHA"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            COMMIT_SHA="${{ github.sha }}"
            echo "Target commit from pull_request: $COMMIT_SHA"
          else
            COMMIT_SHA=""
            echo "No specific commit provided, will look for latest check run"
          fi
          
          # Wait for mutation-results check run with timeout
          MAX_WAIT=1500  # 25 minutes max wait
          WAIT_TIME=0
          SLEEP_INTERVAL=10
          FOUND_CHECK_RUN=false
          
          while [[ $WAIT_TIME -lt $MAX_WAIT ]]; do
            echo "Checking for mutation-results check run (${WAIT_TIME}s elapsed)..."
            
            # First priority: Look for check run on specific commit if provided
            if [[ -n "$COMMIT_SHA" ]]; then
              echo "Looking for check run on commit: ${COMMIT_SHA:0:8}..."
              COMMIT_CHECK_RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/check-runs")
              
              MUTATION_STATUS=$(echo "$COMMIT_CHECK_RUNS" | jq -r '.check_runs[]? | select(.name == "mutation-results") | .status' 2>/dev/null || echo "")
              MUTATION_CONCLUSION=$(echo "$COMMIT_CHECK_RUNS" | jq -r '.check_runs[]? | select(.name == "mutation-results") | .conclusion' 2>/dev/null || echo "")
              
              if [[ -n "$MUTATION_STATUS" ]]; then
                echo "Found mutation-results check run on target commit:"
                echo "  Commit: ${COMMIT_SHA:0:8}"
                echo "  Status: $MUTATION_STATUS"
                echo "  Conclusion: $MUTATION_CONCLUSION"
                FOUND_CHECK_RUN=true
                
                if [[ "$MUTATION_STATUS" == "completed" ]]; then
                  echo "Target check run completed with conclusion: $MUTATION_CONCLUSION"
                  break
                elif [[ "$MUTATION_STATUS" == "in_progress" || "$MUTATION_STATUS" == "queued" ]]; then
                  echo "Target check run is still $MUTATION_STATUS..."
                fi
              else
                echo "No mutation-results check run found on target commit yet"
              fi
            fi
            
            # Fallback: Look for latest check run if no specific commit or not found on target commit
            if [[ "$FOUND_CHECK_RUN" == "false" ]]; then
              echo "Looking for latest mutation-results check run..."
              ALL_CHECK_RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/check-runs?per_page=100")
              
              # Debug: Show what we got
              echo "Debug: API response preview (first 10 check runs):"
              echo "$ALL_CHECK_RUNS" | jq '.check_runs[]? | {name: .name, status: .status, conclusion: .conclusion}' | head -10
              
              LATEST_CHECK_RUN=$(echo "$ALL_CHECK_RUNS" | jq -r '.check_runs[]? | select(.name == "mutation-results") | select(.status != null) | {id: .id, status: .status, conclusion: .conclusion, head_sha: .head_sha}' | head -1)
              
              if [[ -n "$LATEST_CHECK_RUN" && "$LATEST_CHECK_RUN" != "null" ]]; then
                MUTATION_STATUS=$(echo "$LATEST_CHECK_RUN" | jq -r '.status // ""')
                MUTATION_CONCLUSION=$(echo "$LATEST_CHECK_RUN" | jq -r '.conclusion // ""')
                CHECK_RUN_SHA=$(echo "$LATEST_CHECK_RUN" | jq -r '.head_sha // ""')
                
                echo "Found latest mutation-results check run:"
                echo "  Commit: ${CHECK_RUN_SHA:0:8}"
                echo "  Status: $MUTATION_STATUS"
                echo "  Conclusion: $MUTATION_CONCLUSION"
                FOUND_CHECK_RUN=true
                
                if [[ "$MUTATION_STATUS" == "completed" ]]; then
                  echo "Latest check run completed with conclusion: $MUTATION_CONCLUSION"
                  break
                elif [[ "$MUTATION_STATUS" == "in_progress" || "$MUTATION_STATUS" == "queued" ]]; then
                  echo "Latest check run is still $MUTATION_STATUS..."
                fi
              else
                echo "No mutation-results check run found in recent history"
              fi
            fi
            
            if [[ "$FOUND_CHECK_RUN" == "false" ]]; then
              echo "No mutation-results check run found, waiting..."
            fi
            
            sleep $SLEEP_INTERVAL
            WAIT_TIME=$((WAIT_TIME + SLEEP_INTERVAL))
            FOUND_CHECK_RUN=false  # Reset for next iteration
          done
          
          if [[ $WAIT_TIME -ge $MAX_WAIT ]]; then
            echo "Timeout reached. Proceeding with existing results..."
            echo "SHOWING_EXISTING_RESULTS=true" >> $GITHUB_ENV
          fi

      - name: Skip check run wait (manual dispatch)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.skip_check_run_wait == 'true'
        run: |
          echo "Skipping check run wait for manual dispatch run"
          echo "Proceeding immediately with available results"
          echo "SHOWING_EXISTING_RESULTS=true" >> $GITHUB_ENV

      - name: Use latest check run immediately
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.use_latest_run == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Using latest mutation-results check run immediately..."
          
          # Get latest check run directly (without check_name filter)
          LATEST_CHECK_RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/check-runs?per_page=100")
          
          echo "Debug: All check runs API response:"
          echo "$LATEST_CHECK_RUNS" | jq '.check_runs[]? | {name: .name, id: .id, status: .status, conclusion: .conclusion, head_sha: .head_sha, created_at: .created_at}' | head -10
          
          echo "Debug: Available check run names:"
          echo "$LATEST_CHECK_RUNS" | jq -r '.check_runs[]? | .name' | sort | uniq -c
          
          echo "Debug: Filtering for mutation-results..."
          echo "$LATEST_CHECK_RUNS" | jq '.check_runs[]? | select(.name == "mutation-results") | {name: .name, id: .id, status: .status, conclusion: .conclusion, head_sha: .head_sha, created_at: .created_at}' | head -3
          
          echo "Debug: Trying alternative check run names..."
          echo "$LATEST_CHECK_RUNS" | jq '.check_runs[]? | select(.name | test("mutation"; "i")) | {name: .name, id: .id, status: .status, conclusion: .conclusion, head_sha: .head_sha, created_at: .created_at}' | head -3
          
          LATEST_CHECK_RUN=$(echo "$LATEST_CHECK_RUNS" | jq -r '.check_runs[]? | select(.name == "mutation-results") | {id: .id, status: .status, conclusion: .conclusion, head_sha: .head_sha, created_at: .created_at}' | head -1)
          
          if [[ -n "$LATEST_CHECK_RUN" && "$LATEST_CHECK_RUN" != "null" ]]; then
            MUTATION_STATUS=$(echo "$LATEST_CHECK_RUN" | jq -r '.status // ""')
            MUTATION_CONCLUSION=$(echo "$LATEST_CHECK_RUN" | jq -r '.conclusion // ""')
            CHECK_RUN_SHA=$(echo "$LATEST_CHECK_RUN" | jq -r '.head_sha // ""')
            CHECK_RUN_ID=$(echo "$LATEST_CHECK_RUN" | jq -r '.id // ""')
            
            echo "Found latest mutation-results check run:"
            echo "  ID: $CHECK_RUN_ID"
            echo "  Commit: ${CHECK_RUN_SHA:0:8}"
            echo "  Status: $MUTATION_STATUS"
            echo "  Conclusion: $MUTATION_CONCLUSION"
            
            # Extract mutation data if check run is completed
            if [[ "$MUTATION_STATUS" == "completed" ]]; then
              echo "Extracting mutation data from completed check run..."
              
              RAW_OUTPUT=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/check-runs/${CHECK_RUN_ID}" \
                | jq -r '.output.text // ""')
              
              if [[ -n "$RAW_OUTPUT" && "$RAW_OUTPUT" != "" && "$RAW_OUTPUT" != "null" ]]; then
                # Extract values using grep/sed (reliable approach)
                TOTAL_MUTANTS=$(echo "$RAW_OUTPUT" | grep '"TotalMutationsCount"' | head -1 | sed 's/.*: \([0-9]*\).*/\1/' || echo "0")
                KILLED_COUNT=$(echo "$RAW_OUTPUT" | grep '"KilledMutationsCount"' | head -1 | sed 's/.*: \([0-9]*\).*/\1/' || echo "0")
                SURVIVING_COUNT=$(echo "$RAW_OUTPUT" | grep '"SurvivedMutationsCount"' | head -1 | sed 's/.*: \([0-9]*\).*/\1/' || echo "0")
                MUTATION_SCORE=$(echo "$RAW_OUTPUT" | grep '"ScorePercentage"' | head -1 | sed 's/.*: \([0-9]*\).*/\1/' || echo "0")
                
                # Validate we got valid data
                if [[ "$TOTAL_MUTANTS" =~ ^[0-9]+$ && "$TOTAL_MUTANTS" -gt 0 ]]; then
                  echo "Successfully extracted mutation data:"
                  echo "  Total Mutants: $TOTAL_MUTANTS"
                  echo "  Killed: $KILLED_COUNT"
                  echo "  Survived: $SURVIVING_COUNT"
                  echo "  Score: $MUTATION_SCORE%"
                  
                  # Save the extracted data
                  echo "TOTAL_MUTANTS=$TOTAL_MUTANTS" >> $GITHUB_ENV
                  echo "KILLED_COUNT=$KILLED_COUNT" >> $GITHUB_ENV
                  echo "SURVIVING_COUNT=$SURVIVING_COUNT" >> $GITHUB_ENV
                  echo "DISMISSED_COUNT=0" >> $GITHUB_ENV
                  echo "MUTATION_SCORE=$MUTATION_SCORE" >> $GITHUB_ENV
                  echo "DATA_SOURCE=check_run" >> $GITHUB_ENV
                  echo "CHECK_RUN_ID=$CHECK_RUN_ID" >> $GITHUB_ENV
                else
                  echo "Could not extract valid mutation data from check run output"
                fi
              else
                echo "No output text found in check run"
              fi
            fi
            
            echo "SHOWING_EXISTING_RESULTS=true" >> $GITHUB_ENV
          else
            echo "No mutation-results check run found in recent history"
            echo "Will proceed with any available code scanning results"
            echo "SHOWING_EXISTING_RESULTS=true" >> $GITHUB_ENV
          fi

      - name: Get PR Number
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger - use provided PR number or current branch
            if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
              PR_NUMBER="${{ github.event.inputs.pr_number }}"
              echo "Using manual PR number: $PR_NUMBER"
            else
              # Try to find PR for current branch
              BRANCH_NAME="${{ github.ref_name }}"
              echo "Looking for PR for branch: $BRANCH_NAME"
              PR_RESPONSE=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
                "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${BRANCH_NAME}&state=open")
              
              if echo "$PR_RESPONSE" | jq -e '. | type == "array" and length > 0' >/dev/null 2>&1; then
                PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.[0].number')
                echo "Found PR for branch: $PR_NUMBER"
              else
                echo "No open PR found for branch $BRANCH_NAME"
                exit 0
              fi
            fi
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.number }}"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # Get PR number from workflow_run context
            PR_RESPONSE=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.event.workflow_run.head_sha }}/pulls")
            
            if echo "$PR_RESPONSE" | jq -e '. | type == "array" and length > 0' >/dev/null 2>&1; then
              PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.[0].number')
            else
              echo "No PR found for commit ${{ github.event.workflow_run.head_sha }}"
              exit 0
            fi
          else
            echo "Unable to determine PR number"
            exit 0
          fi
          
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "Using PR number: $PR_NUMBER"

      - name: Extract Mutation Testing Data from Check Run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Extracting mutation testing data from check run..."
          
          # Skip if data was already extracted in previous step
          if [[ -n "${DATA_SOURCE:-}" && "${DATA_SOURCE}" == "check_run" ]]; then
            echo "Mutation data already extracted from check run (${TOTAL_MUTANTS} mutants, ${MUTATION_SCORE}% score)"
            echo "Skipping duplicate extraction..."
            exit 0
          fi
          
          # Step 1: Find the latest mutation-results check run
          echo "Finding latest mutation-results check run..."
          
          # Determine commit SHA
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            COMMIT_SHA="${{ github.sha }}"
          else
            COMMIT_SHA=""
          fi
          
          # Try to get check run from specific commit first
          CHECK_RUN_ID=""
          if [[ -n "$COMMIT_SHA" ]]; then
            echo "Looking for check run on commit: ${COMMIT_SHA:0:8}..."
            COMMIT_CHECK_RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/check-runs")
            
            CHECK_RUN_ID=$(echo "$COMMIT_CHECK_RUNS" | jq -r '.check_runs[]? | select(.name == "mutation-results") | .id' | head -1)
          fi
          
          # Fallback to latest check run if not found on specific commit
          if [[ -z "$CHECK_RUN_ID" || "$CHECK_RUN_ID" == "null" ]]; then
            echo "Looking for latest mutation-results check run..."
            ALL_CHECK_RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/check-runs?per_page=100")
            
            CHECK_RUN_ID=$(echo "$ALL_CHECK_RUNS" | jq -r '.check_runs[]? | select(.name == "mutation-results") | .id' | head -1)
          fi
          
          # Initialize mutation data variables
          TOTAL_MUTANTS=0
          KILLED_COUNT=0
          SURVIVING_COUNT=0
          DISMISSED_COUNT=0
          MUTATION_SCORE=0
          DATA_SOURCE="none"
          
          # Step 2: Extract data from check run if found
          if [[ -n "$CHECK_RUN_ID" && "$CHECK_RUN_ID" != "null" ]]; then
            echo "Found mutation-results check run ID: $CHECK_RUN_ID"
            
            # Get the check run output text
            RAW_OUTPUT=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/check-runs/${CHECK_RUN_ID}" \
              | jq -r '.output.text // ""')
            
            if [[ -n "$RAW_OUTPUT" && "$RAW_OUTPUT" != "" && "$RAW_OUTPUT" != "null" ]]; then
              echo "Found check run output, extracting mutation data..."
              
              # Extract values using grep/sed (reliable approach)
              TOTAL_MUTANTS=$(echo "$RAW_OUTPUT" | grep '"TotalMutationsCount"' | head -1 | sed 's/.*: \([0-9]*\).*/\1/' || echo "0")
              KILLED_COUNT=$(echo "$RAW_OUTPUT" | grep '"KilledMutationsCount"' | head -1 | sed 's/.*: \([0-9]*\).*/\1/' || echo "0")
              SURVIVING_COUNT=$(echo "$RAW_OUTPUT" | grep '"SurvivedMutationsCount"' | head -1 | sed 's/.*: \([0-9]*\).*/\1/' || echo "0")
              MUTATION_SCORE=$(echo "$RAW_OUTPUT" | grep '"ScorePercentage"' | head -1 | sed 's/.*: \([0-9]*\).*/\1/' || echo "0")
              
              # Validate we got valid data
              if [[ "$TOTAL_MUTANTS" =~ ^[0-9]+$ && "$TOTAL_MUTANTS" -gt 0 ]]; then
                echo "Successfully extracted mutation data from check run:"
                echo "  Total Mutants: $TOTAL_MUTANTS"
                echo "  Killed: $KILLED_COUNT"
                echo "  Survived: $SURVIVING_COUNT"
                echo "  Score: $MUTATION_SCORE%"
                DATA_SOURCE="check_run"
              else
                echo "Could not extract valid mutation data from check run output"
                TOTAL_MUTANTS=0
                KILLED_COUNT=0
                SURVIVING_COUNT=0
                MUTATION_SCORE=0
              fi
            else
              echo "No output text found in check run"
            fi
          else
            echo "No mutation-results check run found"
          fi
          
          # Step 3: Fallback to code scanning alerts if check run data not available
          if [[ "$DATA_SOURCE" == "none" ]]; then
            echo "Falling back to code scanning alerts..."
            
            # Fetch mutation testing alerts from code scanning
            MUTATIONS_PR=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?pr=${PR_NUMBER}")
            
            MUTATIONS_ALL=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?per_page=100&state=open")
            
            # Use the source with results
            PR_COUNT=$(echo "$MUTATIONS_PR" | jq 'length // 0')
            ALL_COUNT=$(echo "$MUTATIONS_ALL" | jq 'length // 0')
            
            if [[ $PR_COUNT -gt 0 ]]; then
              MUTATIONS="$MUTATIONS_PR"
              echo "Using PR-specific alerts ($PR_COUNT results)"
            else
              MUTATIONS="$MUTATIONS_ALL"
              echo "Using all recent alerts ($ALL_COUNT results)"
            fi
            
            # Filter for Olympix Mutation Testing
            MUTATIONS=$(echo "$MUTATIONS" | jq -c '[ .[] | select(.tool.name == "Olympix Mutation Testing") ]' || echo "[]")
            
            # Extract surviving and dismissed mutants
            SURVIVING_MUTANTS=$(echo "$MUTATIONS" | jq -c '[.[] | select(.state == "open") ]' || echo "[]")
            DISMISSED_MUTANTS=$(echo "$MUTATIONS" | jq -c '[.[] | select(.state == "dismissed")]' || echo "[]")
            
            SURVIVING_COUNT=$(echo "$SURVIVING_MUTANTS" | jq -r 'length')
            DISMISSED_COUNT=$(echo "$DISMISSED_MUTANTS" | jq -r 'length')
            TOTAL_MUTANTS=$((SURVIVING_COUNT + DISMISSED_COUNT))
            KILLED_COUNT=0  # Not available from code scanning
            
            if [[ "$TOTAL_MUTANTS" -gt 0 ]]; then
              MUTATION_SCORE=0  # Cannot calculate accurate score from alerts alone
              DATA_SOURCE="code_scanning"
              echo "Extracted data from code scanning alerts:"
              echo "  Total Mutants: $TOTAL_MUTANTS (surviving + dismissed)"
              echo "  Survived: $SURVIVING_COUNT"
              echo "  Dismissed: $DISMISSED_COUNT"
            else
              echo "No mutation testing data found in code scanning alerts"
              DATA_SOURCE="none"
            fi
          fi
          
          # Save environment variables
          echo "TOTAL_MUTANTS=$TOTAL_MUTANTS" >> $GITHUB_ENV
          echo "KILLED_COUNT=$KILLED_COUNT" >> $GITHUB_ENV
          echo "SURVIVING_COUNT=$SURVIVING_COUNT" >> $GITHUB_ENV
          echo "DISMISSED_COUNT=$DISMISSED_COUNT" >> $GITHUB_ENV
          echo "MUTATION_SCORE=$MUTATION_SCORE" >> $GITHUB_ENV
          echo "DATA_SOURCE=$DATA_SOURCE" >> $GITHUB_ENV
          echo "CHECK_RUN_ID=$CHECK_RUN_ID" >> $GITHUB_ENV
          
          echo "Mutation data extraction completed! Source: $DATA_SOURCE"

      - name: Find Existing PR Comment
        id: find_comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Searching for existing PR comment..."

          # Get comments with better error handling
          COMMENTS_RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: token ${GITHUB_TOKEN}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments?per_page=20&sort=updated&direction=desc")
          
          # Extract HTTP status code and response body
          HTTP_CODE="${COMMENTS_RESPONSE: -3}"
          COMMENTS_BODY="${COMMENTS_RESPONSE%???}"
          
          echo "API response code: $HTTP_CODE"
          
          if [[ "$HTTP_CODE" == "200" ]]; then
            echo "Recent comments count: $(echo "$COMMENTS_BODY" | jq 'length // 0' 2>/dev/null || echo "0")"
            
            # Check if response is valid JSON array
            if echo "$COMMENTS_BODY" | jq -e '. | type == "array"' >/dev/null 2>&1; then
              # Look for comment starting with the correct header
              COMMENT_ID=$(echo "$COMMENTS_BODY" | jq -r \
                '.[] | select(.body | test("^## Mutation Testing Report")) | .id // empty' | head -1)
            else
              echo "Warning: Invalid JSON response from comments API"
              echo "Response preview: ${COMMENTS_BODY:0:200}..."
              COMMENT_ID=""
            fi
          else
            echo "Error: API returned HTTP $HTTP_CODE"
            echo "Response preview: ${COMMENTS_BODY:0:200}..."
            COMMENT_ID=""
          fi

          if [[ -n "$COMMENT_ID" && "$COMMENT_ID" != "null" && "$COMMENT_ID" != "empty" ]]; then
            echo "EXISTING_COMMENT_ID=$COMMENT_ID" >> $GITHUB_ENV
            echo "Found existing comment ID: $COMMENT_ID"
          else
            echo "No existing comment found"
          fi

      - name: Post or Update PR Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use extracted data or calculate from surviving/dismissed if needed
          if [[ "$KILLED_COUNT" -eq 0 && "$TOTAL_MUTANTS" -gt 0 && "$DATA_SOURCE" == "code_scanning" ]]; then
            # For code scanning source, we can't know killed count precisely
            # Estimate: assume remaining mutants were killed
            KILLED_COUNT=$((TOTAL_MUTANTS - SURVIVING_COUNT))
          fi
          
          # Calculate mutation score if not already provided
          if [[ "$MUTATION_SCORE" -eq 0 && "$TOTAL_MUTANTS" -gt 0 ]]; then
            MUTATION_SCORE=$(( (KILLED_COUNT * 100) / TOTAL_MUTANTS ))
          fi
          
          # Create professional comment
          COMMENT_BODY="## Mutation Testing Report\n\n"
          
          # Add data source note
          if [[ "$DATA_SOURCE" == "check_run" ]]; then
            COMMENT_BODY+="**Note:** Generated from real check run data"
            if [[ -n "$CHECK_RUN_ID" ]]; then
              COMMENT_BODY+=" (ID: $CHECK_RUN_ID)"
            fi
            COMMENT_BODY+="\n\n"
          elif [[ "$DATA_SOURCE" == "code_scanning" ]]; then
            COMMENT_BODY+="**Note:** Generated from code scanning alerts (limited data available)\n\n"
          elif [[ "${SHOWING_EXISTING_RESULTS:-false}" == "true" ]]; then
            COMMENT_BODY+="**Note:** Displaying existing results while current analysis is in progress.\n\n"
          fi
          
          # Core statistics table
          COMMENT_BODY+="### Test Coverage Analysis\n\n"
          COMMENT_BODY+="| Metric | Value |\n"
          COMMENT_BODY+="|--------|-------|\n"
          COMMENT_BODY+="| **Mutation Score** | ${MUTATION_SCORE}% |\n"
          COMMENT_BODY+="| **Total Mutants** | ${TOTAL_MUTANTS} |\n"
          COMMENT_BODY+="| **Killed Mutants** | ${KILLED_COUNT} |\n"
          COMMENT_BODY+="| **Surviving Mutants** | ${SURVIVING_COUNT} |\n"
          COMMENT_BODY+="| **Dismissed Findings** | ${DISMISSED_COUNT} |\n\n"
          
          # Assessment based on mutation score
          if [[ $MUTATION_SCORE -ge 90 ]]; then
            ASSESSMENT="Excellent"
            RECOMMENDATION="Test coverage meets enterprise standards."
          elif [[ $MUTATION_SCORE -ge 80 ]]; then
            ASSESSMENT="Good" 
            RECOMMENDATION="Test coverage is adequate with minor gaps identified."
          elif [[ $MUTATION_SCORE -ge 70 ]]; then
            ASSESSMENT="Moderate"
            RECOMMENDATION="Test coverage requires improvement to meet quality standards."
          elif [[ $MUTATION_SCORE -ge 50 ]]; then
            ASSESSMENT="Poor"
            RECOMMENDATION="Significant test coverage gaps detected. Review and enhancement required."
          else
            ASSESSMENT="Critical"
            if [[ $TOTAL_MUTANTS -eq 0 ]]; then
              RECOMMENDATION="Test coverage is insufficient. Immediate attention required."
            else
              RECOMMENDATION="Test coverage is insufficient, or mutation testing is not configured correctly."
            fi
          fi
          
          COMMENT_BODY+="### Quality Assessment\n\n"
          COMMENT_BODY+="**Coverage Quality:** ${ASSESSMENT}\n\n"
          COMMENT_BODY+="**Recommendation:** ${RECOMMENDATION}\n\n"
          
          # Action items
          if [[ $SURVIVING_COUNT -gt 0 ]]; then
            COMMENT_BODY+="### Required Actions\n\n"
            COMMENT_BODY+="- Review ${SURVIVING_COUNT} surviving mutants in [Code Scanning](../../security/code-scanning?tool=Olympix%20Mutation%20Testing)\n"
            COMMENT_BODY+="- Add test cases to eliminate coverage gaps\n"
            COMMENT_BODY+="- Validate business logic assertions in existing tests\n\n"
          else
            if [[ $TOTAL_MUTANTS -gt 0 ]]; then
              COMMENT_BODY+="### Status\n\n"
              COMMENT_BODY+="All generated mutants have been successfully eliminated by the test suite.\n\n"
            else
              COMMENT_BODY+="### Status\n\n"
              COMMENT_BODY+="No mutation testing analysis results are currently available for this branch.\n\n"
              COMMENT_BODY+="**Diagnostic Information:**\n"
              COMMENT_BODY+="- [View Latest Mutation Testing Workflow](../../actions/workflows/olympixMutationTesting.yml)\n"
              COMMENT_BODY+="- [View Latest Check Runs](../../commits/${{ github.event.workflow_run.head_sha || github.sha }}/checks)\n"
              COMMENT_BODY+="- Verify that mutation testing has completed successfully for this commit\n\n"
            fi
          fi
          
          # Technical details
          COMMENT_BODY+="---\n"
          COMMENT_BODY+="*Mutation testing evaluates test suite effectiveness by introducing controlled code modifications and verifying that existing tests detect these changes.*"

          # Update existing comment if found; otherwise, post a new one
          if [[ -n "${EXISTING_COMMENT_ID:-}" ]]; then
            echo "Updating existing comment ID: $EXISTING_COMMENT_ID"
            curl -s -X PATCH -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type: application/json" \
              -d "{\"body\": \"$COMMENT_BODY\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/${EXISTING_COMMENT_ID}"
          else
            echo "Posting new comment to PR $PR_NUMBER..."
            curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type: application/json" \
              -d "{\"body\": \"$COMMENT_BODY\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          fi

 